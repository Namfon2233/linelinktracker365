const express = require("express");
const fs = require("fs");
const path = require("path");
const router = express.Router();

const GROUPS_PATH = path.resolve(__dirname, '../data/groups.json');
console.log("üìÅ GROUPS_PATH = ", GROUPS_PATH);
console.log("üì¶ File exists? = ", fs.existsSync(GROUPS_PATH));
console.log("üìÑ File content = ", fs.readFileSync(GROUPS_PATH, "utf8"));
const LOGS_PATH = path.resolve(__dirname, '../data/logs.json');
const STATE_PATH = path.resolve(__dirname, '../data/state.json');

// üîÅ ‡πÇ‡∏´‡∏•‡∏î group
function loadGroups() {
  if (!fs.existsSync(GROUPS_PATH)) return {};
  return JSON.parse(fs.readFileSync(GROUPS_PATH));
}

// üß† ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
function loadState() {
  if (!fs.existsSync(STATE_PATH)) return {};
  return JSON.parse(fs.readFileSync(STATE_PATH));
}

// üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
function saveState(state) {
  fs.writeFileSync(STATE_PATH, JSON.stringify(state, null, 2));
}

// üß† ‡πÇ‡∏´‡∏•‡∏î log
function loadLogs() {
  if (!fs.existsSync(LOGS_PATH)) return [];
  return JSON.parse(fs.readFileSync(LOGS_PATH));
}

// üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
function saveLogs(logs) {
  fs.writeFileSync(LOGS_PATH, JSON.stringify(logs, null, 2));
}

// ‚úÖ Round-robin redirect
console.log("‚úÖ Full GROUPS_PATH:", GROUPS_PATH);
console.log("‚úÖ File exists:", fs.existsSync(GROUPS_PATH));
console.log("‚úÖ Raw file content:", fs.readFileSync(GROUPS_PATH, "utf8"));
router.get("/click/:groupId", (req, res) => {
  const groupId = req.params.groupId;
  const groups = loadGroups();
  console.log("Loaded groups:", groups); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

  const state = loadState();
  const logs = loadLogs();

  const links = groups[groupId]; // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  console.log("Requested group:", groupId); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  console.log("Links in group:", links); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

  if (!links || links.length === 0) {
    return res.status(404).send("Group not found or empty");
  }

  const index = state[groupId] || 0;
  const selectedUrl = links[index];

  // üß† ‡∏ß‡∏ô index
  state[groupId] = (index + 1) % links.length;
  saveState(state);

  const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
  const userAgent = req.headers["user-agent"];
  const timestamp = new Date().toISOString();

  logs.push({ group: groupId, url: selectedUrl, ip, userAgent, timestamp });
  saveLogs(logs);

  res.redirect(selectedUrl);
});

module.exports = router;
