const express = require("express");
const fs = require("fs");
const path = require("path");
const router = express.Router();

const GROUPS_PATH = path.resolve(__dirname, '../../data/groups.json');
const LOGS_PATH = path.resolve(__dirname, '../../data/logs.json');
const STATE_PATH = path.resolve(__dirname, '../../data/state.json');

// ü™µ Debug Log
console.log("üìÅ GROUPS_PATH = ", GROUPS_PATH);
console.log('üì¶ File exists? = ', fs.existsSync(GROUPS_PATH));
console.log("üìÑ File content = ", fs.readFileSync(GROUPS_PATH, "utf8"));

// üîÅ ‡πÇ‡∏´‡∏•‡∏î group
function loadGroups() {
  if (!fs.existsSync(GROUPS_PATH)) return {};
  return JSON.parse(fs.readFileSync(GROUPS_PATH));
}

// üß† ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå (round-robin)
function loadState() {
  if (!fs.existsSync(STATE_PATH)) return {};
  return JSON.parse(fs.readFileSync(STATE_PATH));
}

// üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
function saveState(state) {
  fs.writeFileSync(STATE_PATH, JSON.stringify(state, null, 2));
}

// üß† ‡πÇ‡∏´‡∏•‡∏î log
function loadLogs() {
  if (!fs.existsSync(LOGS_PATH)) return [];
  return JSON.parse(fs.readFileSync(LOGS_PATH));
}

// üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log
function saveLogs(logs) {
  fs.writeFileSync(LOGS_PATH, JSON.stringify(logs, null, 2));
}

// ‚úÖ Round-robin redirect: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
router.get("/click/:groupId", (req, res) => {
  const groupId = req.params.groupId;
  const groups = loadGroups();
  const state = loadState();
  const logs = loadLogs();

  console.log("‚úÖ Requested group:", groupId);
  console.log("üîÅ Group data:", groups[groupId]);

  const links = groups[groupId]; // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô

  if (!links || links.length === 0) {
    return res.status(404).send("Group not found or empty");
  }

  const index = state[groupId] || 0;
  const selectedUrl = links[index];

  // üß† ‡∏ß‡∏ô index
  state[groupId] = (index + 1) % links.length;
  saveState(state);

  const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
  const userAgent = req.headers["user-agent"];
  const timestamp = new Date().toISOString();

  logs.push({
    group: groupId,
    url: selectedUrl,
    ip,
    userAgent,
    timestamp,
  });
  saveLogs(logs);

  // üîÄ Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  res.redirect(selectedUrl);
});

module.exports = router;
